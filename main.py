import os
import telebot
from flask import Flask, request
from threading import Thread
import time
import requests
import logging
from waitress import serve
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.utils import formataddr
from products import PRODUCTS  # –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

app = Flask(__name__)
token = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(token)
WEBHOOK_URL = f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/{token}"
PORT = int(os.getenv("PORT", 8080))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã (–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
SMTP_SERVER = 'smtp.mail.ru'  # –î–ª—è mail.ru
SMTP_PORT = 587
EMAIL_ADDRESS = '5049190@mail.ru'
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')  # –ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã (–¥–æ–±–∞–≤—å—Ç–µ –≤ Render)

# –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu_markup():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        "–ù–∞—à —Å–∞–π—Ç üåê", 
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º üìñ", 
        "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úâÔ∏è"
    ]
    markup.add(*[telebot.types.KeyboardButton(btn) for btn in buttons])
    return markup

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_markup()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    try:
        if message.text == "–ù–∞—à —Å–∞–π—Ç üåê":
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", 
                url="https://jemmfashion.ru"
            ))
            bot.send_message(
                message.chat.id,
                "üå± –ù–∞—à —Å–∞–π—Ç —Å –ø–æ–ª–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º:",
                reply_markup=markup
            )

        elif message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º üìñ":
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            for product_name in PRODUCTS.keys():
                markup.add(telebot.types.KeyboardButton(product_name))
            markup.add(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥ üîô"))
            bot.send_message(
                message.chat.id,
                "üåø –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                reply_markup=markup
            )

        elif message.text == "–ù–∞–∑–∞–¥ üîô":
            bot.send_message(
                message.chat.id,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu_markup()
            )

        elif message.text in PRODUCTS:
            bot.send_message(
                message.chat.id,
                PRODUCTS[message.text],
                parse_mode="HTML",
                reply_markup=main_menu_markup()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–¥–µ—Å—å
            )

        elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úâÔ∏è":
            msg = bot.send_message(
                message.chat.id,
                "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è):",
                reply_markup=telebot.types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, process_name_step)

        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
                reply_markup=main_menu_markup()
            )

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_markup()
        )

# --- –®–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ---
def process_name_step(message):
    try:
        chat_id = message.chat.id
        user_data[chat_id] = {'name': message.text.strip()}
        
        msg = bot.send_message(
            chat_id,
            "üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:"
        )
        bot.register_next_step_handler(msg, process_phone_step)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úâÔ∏è'.",
            reply_markup=main_menu_markup()
        )

def process_phone_step(message):
    try:
        chat_id = message.chat.id
        phone = message.text.strip()
        
        if not phone:
            msg = bot.send_message(
                chat_id,
                "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            bot.register_next_step_handler(msg, process_phone_step)
            return
            
        user_data[chat_id]['phone'] = phone
        
        msg = bot.send_message(
            chat_id,
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        bot.register_next_step_handler(msg, process_question_step)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úâÔ∏è'.",
            reply_markup=main_menu_markup()
        )

def process_question_step(message):
    try:
        chat_id = message.chat.id
        question = message.text.strip()
        
        if not question:
            msg = bot.send_message(
                chat_id,
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            bot.register_next_step_handler(msg, process_question_step)
            return
            
        user_data[chat_id]['question'] = question
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        name = user_data[chat_id]['name']
        phone = user_data[chat_id]['phone']
        email_text = f"""
        –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        –ò–º—è: {name}
        –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
        –í–æ–ø—Ä–æ—Å: {question}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        if send_email(email_text):
            bot.send_message(
                chat_id,
                "‚úÖ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!",
                reply_markup=main_menu_markup()
            )
        else:
            bot.send_message(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu_markup()
            )
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úâÔ∏è'.",
            reply_markup=main_menu_markup()
        )
    finally:
        if chat_id in user_data:
            del user_data[chat_id]

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ email ---
def send_email(text):
    try:
        msg = MIMEMultipart()
        msg['From'] = formataddr(('Telegram Bot', EMAIL_ADDRESS))
        msg['To'] = EMAIL_ADDRESS
        msg['Subject'] = '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–æ—Ç–∞'
        msg.attach(MIMEText(text, 'plain'))
        
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.send_message(msg)
        
        logging.info('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
        return True
    except Exception as e:
        logging.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}')
        return False

# --- –ê–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ (—á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ "–∑–∞—Å—ã–ø–∞–ª") ---
def ping_server():
    while True:
        try:
            requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=5)
            logging.info("‚úÖ –°–≤—è–∑—å —Å Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å Telegram: {e}")
        
        try:
            requests.get(f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com", timeout=5)
            logging.info("üîÑ –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        
        time.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç

# --- –ó–∞–ø—É—Å–∫ Flask ---
def run_flask():
    serve(app, host="0.0.0.0", port=PORT)

# --- –í–µ–±—Ö—É–∫–∏ ---
@app.route("/")
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: UptimeRobot + Render"

@app.route(f"/{token}", methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        try:
            json_data = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_data)
            bot.process_new_updates([update])
            return "OK", 200
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
            return "Bad Request", 400
    return "Forbidden", 403

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=WEBHOOK_URL)
        Thread(target=ping_server).start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
        run_flask()
    except Exception as e:
        logging.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")